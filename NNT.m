
%this file used for training and testing of images


% Solve an Input-Output Fitting problem with a Neural Network
% Script generated by NFTOOL
% Created Sun Feb 26 13:56:14 IST 2017
%
% This script assumes these variables are defined:
%
%   houseInputs - input data.
%   houseTargets - target data.
function NNT(inputs,targets)
% inputs = houseInputs;
% targets = houseTargets;

% Create a Fitting Network
hiddenLayerSize = 10;
net = fitnet(hiddenLayerSize);


% Setup Division of Data for Training, Validation, Testing
net.divideParam.trainRatio = 70/100;
net.divideParam.valRatio = 15/100;
net.divideParam.testRatio = 15/100;
% Train the Network
[net,tr] = train(net,inputs,targets);
% Test the Network
outputs = net(inputs);
% View the accuracy 
nnconfusion(targets,outputs);
% disp(C);
% [row,col]=size(C);
% disp('accuracy:');
% disp(C(row,col));
 view(net);
 facetest='';
 file_ext = '.pgm';
facetest_content = dir ([facetest,'*',file_ext]);
nface= size(facetest_content,1);
disp(nface);
fprintf ('Loading Faces ');
for k=1:nface
    string = [facetest,facetest_content(k,1).name];
    disp(string);
    image = imread(string);
      pad = [134 114] - size(image);
    pad(pad<0) = 0;
    I = padarray(image, floor(pad./2));
%     I=image;
    input=FaceCrop(I);
%     disp('input:');
%     disp(input);
    y=sim(net,input);
%     disp('y:');
%     disp(y);
    [val, idx] = max(y);
    string = [facetest,facetest_content(idx,1).name];
    disp(string);
    image = imread(string);
    title(idx);
    figure, imshow(image);
end

end
